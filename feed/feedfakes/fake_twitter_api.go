// This file was generated by counterfeiter
package feedfakes

import (
	"net/url"
	"sync"

	"github.com/ChimeraCoder/anaconda"
	"github.com/migdi/buzzfeed/feed"
)

type FakeTwitterApi struct {
	GetUserTimelineStub        func(params url.Values) ([]anaconda.Tweet, error)
	getUserTimelineMutex       sync.RWMutex
	getUserTimelineArgsForCall []struct {
		params url.Values
	}
	getUserTimelineReturns struct {
		result1 []anaconda.Tweet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTwitterApi) GetUserTimeline(params url.Values) ([]anaconda.Tweet, error) {
	fake.getUserTimelineMutex.Lock()
	fake.getUserTimelineArgsForCall = append(fake.getUserTimelineArgsForCall, struct {
		params url.Values
	}{params})
	fake.recordInvocation("GetUserTimeline", []interface{}{params})
	fake.getUserTimelineMutex.Unlock()
	if fake.GetUserTimelineStub != nil {
		return fake.GetUserTimelineStub(params)
	} else {
		return fake.getUserTimelineReturns.result1, fake.getUserTimelineReturns.result2
	}
}

func (fake *FakeTwitterApi) GetUserTimelineCallCount() int {
	fake.getUserTimelineMutex.RLock()
	defer fake.getUserTimelineMutex.RUnlock()
	return len(fake.getUserTimelineArgsForCall)
}

func (fake *FakeTwitterApi) GetUserTimelineArgsForCall(i int) url.Values {
	fake.getUserTimelineMutex.RLock()
	defer fake.getUserTimelineMutex.RUnlock()
	return fake.getUserTimelineArgsForCall[i].params
}

func (fake *FakeTwitterApi) GetUserTimelineReturns(result1 []anaconda.Tweet, result2 error) {
	fake.GetUserTimelineStub = nil
	fake.getUserTimelineReturns = struct {
		result1 []anaconda.Tweet
		result2 error
	}{result1, result2}
}

func (fake *FakeTwitterApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserTimelineMutex.RLock()
	defer fake.getUserTimelineMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTwitterApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ feed.TwitterApi = new(FakeTwitterApi)
